<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="0" total="69" passed="69">
  <reporter-output>
  </reporter-output>
  <suite name="creatStaff" duration-ms="12846" started-at="2019-11-01T08:48:24 ICT" finished-at="2019-11-01T08:48:37 ICT">
    <groups>
    </groups>
    <test name="TC_01" duration-ms="7971" started-at="2019-11-01T08:48:24 ICT" finished-at="2019-11-01T08:48:32 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@411f53a0]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="11" started-at="2019-11-01T08:48:24 ICT" finished-at="2019-11-01T08:48:24 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@411f53a0]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="7528" started-at="2019-11-01T08:48:24 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:31 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@411f53a0]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:31 ICT" finished-at="2019-11-01T08:48:31 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@411f53a0]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:31 ICT" finished-at="2019-11-01T08:48:31 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@411f53a0]" name="initializationObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:31 ICT" finished-at="2019-11-01T08:48:31 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@411f53a0]" name="saveEmployee" duration-ms="127" started-at="2019-11-01T08:48:31 ICT" finished-at="2019-11-01T08:48:31 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[NGuyên Vũ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu86@gmail.com]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109262]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@411f53a0]" name="tearDownObject" is-config="true" duration-ms="193" started-at="2019-11-01T08:48:31 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@411f53a0]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@411f53a0]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_01 -->
    <test name="TC_02" duration-ms="98" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@5bda8e08]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:32 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@5bda8e08]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@5bda8e08]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@5bda8e08]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@5bda8e08]" name="initializationObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@5bda8e08]" name="saveEmployee" duration-ms="28" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@5bda8e08]" name="tearDownObject" is-config="true" duration-ms="14" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@5bda8e08]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@5bda8e08]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_02 -->
    <test name="TC_03" duration-ms="72" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@2cd76f31]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@2cd76f31]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="4" started-at="2019-11-01T08:48:32 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@2cd76f31]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@2cd76f31]" name="initializationObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@2cd76f31]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@2cd76f31]" name="saveEmployee" duration-ms="19" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[A]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần Anh@]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[09451092622312323]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@2cd76f31]" name="tearDownObject" is-config="true" duration-ms="5" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@2cd76f31]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@2cd76f31]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:32 ICT" finished-at="2019-11-01T08:48:32 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_03 -->
    <test name="TC_04" duration-ms="204" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@3bd82cf5]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@3bd82cf5]" name="setUp" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@3bd82cf5]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@3bd82cf5]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@3bd82cf5]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@3bd82cf5]" name="saveEmployee" duration-ms="26" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@3bd82cf5]" name="tearDownObject" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@3bd82cf5]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@3bd82cf5]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_04 -->
    <test name="TC_05" duration-ms="74" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@22fcf7ab]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@22fcf7ab]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="5" started-at="2019-11-01T08:48:33 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@22fcf7ab]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@22fcf7ab]" name="initializationObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@22fcf7ab]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@22fcf7ab]" name="saveEmployee" duration-ms="14" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[vietldph05461@fpt.edu.vn]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@22fcf7ab]" name="tearDownObject" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@22fcf7ab]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@22fcf7ab]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_05 -->
    <test name="TC_06" duration-ms="70" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@5b94b04d]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@5b94b04d]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@5b94b04d]" name="setUp" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@5b94b04d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@5b94b04d]" name="saveEmployee" duration-ms="39" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[%leanhvu@gmail.com]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109264]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@5b94b04d]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@5b94b04d]" name="tearDownObject" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@5b94b04d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@5b94b04d]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:33 ICT" finished-at="2019-11-01T08:48:33 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_06 -->
    <test name="TC_07" duration-ms="24" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@1dac5ef]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@1dac5ef]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@1dac5ef]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@1dac5ef]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@1dac5ef]" name="initializationObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@1dac5ef]" name="saveEmployee" duration-ms="11" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh Vũ#]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109265]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@1dac5ef]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@1dac5ef]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@1dac5ef]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_07 -->
    <test name="TC_08" duration-ms="44" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@3098cf3b]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@3098cf3b]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@3098cf3b]" name="setUp" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@3098cf3b]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@3098cf3b]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@3098cf3b]" name="saveEmployee" duration-ms="10" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh Vũ]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com!]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109266212122]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@3098cf3b]" name="tearDownObject" is-config="true" duration-ms="5" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@3098cf3b]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="8" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@3098cf3b]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_08 -->
    <test name="TC_09" duration-ms="44" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@1018bde2]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@1018bde2]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:34 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@1018bde2]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@1018bde2]" name="initializationObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@1018bde2]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@1018bde2]" name="saveEmployee" duration-ms="11" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh Vũ#]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[T]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109267#]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@1018bde2]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@1018bde2]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@1018bde2]" name="springTestContextAfterTestClass" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_09 -->
    <test name="TC_10" duration-ms="25" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@609db43b]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@609db43b]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@609db43b]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@609db43b]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@609db43b]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@609db43b]" name="saveEmployee" duration-ms="10" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh Vũ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com^]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109268]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@609db43b]" name="tearDownObject" is-config="true" duration-ms="4" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@609db43b]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@609db43b]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:34 ICT" finished-at="2019-11-01T08:48:34 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_10 -->
    <test name="TC_11" duration-ms="21" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@4e268090]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@4e268090]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@4e268090]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@4e268090]" name="saveEmployee" duration-ms="9" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com^]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109268]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@4e268090]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@4e268090]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@4e268090]" name="tearDownObject" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@4e268090]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@4e268090]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_11 -->
    <test name="TC_12" duration-ms="19" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@4cc8eb05]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@4cc8eb05]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@4cc8eb05]" name="setUp" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@4cc8eb05]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@4cc8eb05]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@4cc8eb05]" name="saveEmployee" duration-ms="7" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh Vũ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[094510927]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@4cc8eb05]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@4cc8eb05]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@4cc8eb05]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_12 -->
    <test name="TC_13" duration-ms="28" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@e7edb54]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@e7edb54]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@e7edb54]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@e7edb54]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@e7edb54]" name="saveEmployee" duration-ms="10" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[A]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com^]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109271%]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@e7edb54]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@e7edb54]" name="tearDownObject" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@e7edb54]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@e7edb54]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_13 -->
    <test name="TC_14" duration-ms="20" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@1e6454ec]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@1e6454ec]" name="setUp" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@1e6454ec]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@1e6454ec]" name="initializationObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@1e6454ec]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@1e6454ec]" name="saveEmployee" duration-ms="9" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần@]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com^]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[094510927]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@1e6454ec]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@1e6454ec]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@1e6454ec]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_14 -->
    <test name="TC_15" duration-ms="14" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@6d3a388c]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@6d3a388c]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@6d3a388c]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@6d3a388c]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@6d3a388c]" name="saveEmployee" duration-ms="4" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[T]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[09451092731231]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@6d3a388c]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@6d3a388c]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@6d3a388c]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@6d3a388c]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_15 -->
    <test name="TC_16" duration-ms="22" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@7e5afaa6]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@7e5afaa6]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@7e5afaa6]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@7e5afaa6]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@7e5afaa6]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@7e5afaa6]" name="saveEmployee" duration-ms="6" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh Vũ!]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[094510927]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@7e5afaa6]" name="tearDownObject" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@7e5afaa6]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@7e5afaa6]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_16 -->
    <test name="TC_17" duration-ms="14" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@4d0f2471]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@4d0f2471]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@4d0f2471]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@4d0f2471]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@4d0f2471]" name="saveEmployee" duration-ms="7" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[A]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@4d0f2471]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@4d0f2471]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@4d0f2471]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@4d0f2471]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_17 -->
    <test name="TC_18" duration-ms="16" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@614ca7df]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:35 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@614ca7df]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@614ca7df]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@614ca7df]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@614ca7df]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@614ca7df]" name="saveEmployee" duration-ms="7" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109276]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@614ca7df]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@614ca7df]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@614ca7df]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:35 ICT" finished-at="2019-11-01T08:48:35 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_18 -->
    <test name="TC_19" duration-ms="15" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@d5b810e]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@d5b810e]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@d5b810e]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@d5b810e]" name="saveEmployee" duration-ms="5" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh Vũ$]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com^]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[09451092771212112]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@d5b810e]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@d5b810e]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@d5b810e]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@d5b810e]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@d5b810e]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_19 -->
    <test name="TC_20" duration-ms="15" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@729d991e]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:36 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@729d991e]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@729d991e]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@729d991e]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@729d991e]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@729d991e]" name="saveEmployee" duration-ms="4" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh Vũ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[T]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com^]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@729d991e]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@729d991e]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@729d991e]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_20 -->
    <test name="TC_21" duration-ms="10" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@47d9a273]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@47d9a273]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@47d9a273]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@47d9a273]" name="initializationObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@47d9a273]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@47d9a273]" name="saveEmployee" duration-ms="4" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh Vũ$]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com^]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[09451092771212112]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@47d9a273]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@47d9a273]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@47d9a273]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_21 -->
    <test name="TC_22" duration-ms="16" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@771a660]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@771a660]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@771a660]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@771a660]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@771a660]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@771a660]" name="saveEmployee" duration-ms="5" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109280123432]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@771a660]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@771a660]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@771a660]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_22 -->
    <test name="TC_23" duration-ms="13" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@5677323c]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@5677323c]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@5677323c]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@5677323c]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@5677323c]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@5677323c]" name="saveEmployee" duration-ms="4" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh Vũ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần ^]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109281%]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@5677323c]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@5677323c]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@5677323c]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_23 -->
    <test name="TC_24" duration-ms="15" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@63376bed]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@63376bed]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@63376bed]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@63376bed]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@63376bed]" name="saveEmployee" duration-ms="4" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[094510928223222]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@63376bed]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@63376bed]" name="tearDownObject" is-config="true" duration-ms="4" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@63376bed]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@63376bed]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_24 -->
    <test name="TC_25" duration-ms="13" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@5b1669c0]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@5b1669c0]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@5b1669c0]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@5b1669c0]" name="saveEmployee" duration-ms="4" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[T]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109283]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@5b1669c0]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@5b1669c0]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@5b1669c0]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@5b1669c0]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@5b1669c0]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_25 -->
    <test name="TC_26" duration-ms="9" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@235ecd9f]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@235ecd9f]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@235ecd9f]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@235ecd9f]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@235ecd9f]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@235ecd9f]" name="saveEmployee" duration-ms="4" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anh Vũ$]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109284]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@235ecd9f]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@235ecd9f]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@235ecd9f]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_26 -->
    <test name="TC_27" duration-ms="9" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@4c60d6e9]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@4c60d6e9]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@4c60d6e9]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@4c60d6e9]" name="saveEmployee" duration-ms="3" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0945109285]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@4c60d6e9]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@4c60d6e9]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@4c60d6e9]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@4c60d6e9]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@4c60d6e9]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_27 -->
    <test name="TC_28" duration-ms="13" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@16eb3ea3]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@16eb3ea3]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@16eb3ea3]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@16eb3ea3]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@16eb3ea3]" name="saveEmployee" duration-ms="5" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[A]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[T]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[094510928]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@16eb3ea3]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@16eb3ea3]" name="tearDownObject" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@16eb3ea3]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@16eb3ea3]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_28 -->
    <test name="TC_29" duration-ms="20" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@183ec003]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@183ec003]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@183ec003]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@183ec003]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@183ec003]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@183ec003]" name="saveEmployee" duration-ms="6" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Trần @]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[leanhvu@gmail.com]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@183ec003]" name="tearDownObject" is-config="true" duration-ms="9" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@183ec003]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@183ec003]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:36 ICT" finished-at="2019-11-01T08:48:36 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_29 -->
    <test name="TC_30" duration-ms="9" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
      <class name="com.junit.testEmployee">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testEmployee@73eb439a]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:37 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testEmployee@73eb439a]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testEmployee@73eb439a]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@73eb439a]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testEmployee@73eb439a]" name="saveEmployee" duration-ms="3" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[T]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[T]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[12345678]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testEmployee@73eb439a]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testEmployee@73eb439a]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testEmployee@73eb439a]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testEmployee.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testEmployee@73eb439a]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testEmployee -->
    </test> <!-- TC_30 -->
  </suite> <!-- creatStaff -->
  <suite name="creatStaTion" duration-ms="9430" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:46 ICT">
    <groups>
    </groups>
    <test name="TC_01" duration-ms="61" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@4bdeaabb]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@4bdeaabb]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="5" started-at="2019-11-01T08:48:37 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@4bdeaabb]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@4bdeaabb]" name="saveEmployee" duration-ms="20" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn #]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00*]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:00]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@4bdeaabb]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@4bdeaabb]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@4bdeaabb]" name="tearDownObject" is-config="true" duration-ms="5" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@4bdeaabb]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@4bdeaabb]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_01 -->
    <test name="TC_02" duration-ms="79" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@5745ca0e]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@5745ca0e]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:37 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@5745ca0e]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@5745ca0e]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@5745ca0e]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@5745ca0e]" name="saveEmployee" duration-ms="34" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00a]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@5745ca0e]" name="tearDownObject" is-config="true" duration-ms="5" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@5745ca0e]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@5745ca0e]" name="springTestContextAfterTestClass" is-config="true" duration-ms="10" started-at="2019-11-01T08:48:37 ICT" finished-at="2019-11-01T08:48:37 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_02 -->
    <test name="TC_03" duration-ms="26" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@33ecda92]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@33ecda92]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@33ecda92]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@33ecda92]" name="saveEmployee" duration-ms="12" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000@]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00]]>
              </value>
            </param>
            <param index="4">
              <value is-null="true"/>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@33ecda92]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@33ecda92]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@33ecda92]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@33ecda92]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@33ecda92]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_03 -->
    <test name="TC_04" duration-ms="38" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@3932c79a]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:38 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@3932c79a]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@3932c79a]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@3932c79a]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@3932c79a]" name="saveEmployee" duration-ms="16" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:03]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@3932c79a]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@3932c79a]" name="tearDownObject" is-config="true" duration-ms="4" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@3932c79a]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@3932c79a]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_04 -->
    <test name="TC_05" duration-ms="26" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@5276d6ee]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@5276d6ee]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@5276d6ee]" name="setUp" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@5276d6ee]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@5276d6ee]" name="saveEmployee" duration-ms="9" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ TpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytTpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00a]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:04a]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@5276d6ee]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@5276d6ee]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@5276d6ee]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@5276d6ee]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_05 -->
    <test name="TC_06" duration-ms="95" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:39 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@5a7fe64f]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:38 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@5a7fe64f]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@5a7fe64f]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@5a7fe64f]" name="saveEmployee" duration-ms="63" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000%]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00a]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:05]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@5a7fe64f]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@5a7fe64f]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:38 ICT" finished-at="2019-11-01T08:48:38 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@5a7fe64f]" name="tearDownObject" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@5a7fe64f]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@5a7fe64f]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_06 -->
    <test name="TC_07" duration-ms="24" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@9816741]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@9816741]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:39 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@9816741]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@9816741]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@9816741]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@9816741]" name="saveEmployee" duration-ms="10" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:61]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:06a]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@9816741]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@9816741]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@9816741]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_07 -->
    <test name="TC_08" duration-ms="36" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@730d2164]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@730d2164]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:39 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@730d2164]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@730d2164]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@730d2164]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@730d2164]" name="saveEmployee" duration-ms="12" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[TpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytTpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[25:00]]>
              </value>
            </param>
            <param index="4">
              <value is-null="true"/>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@730d2164]" name="tearDownObject" is-config="true" duration-ms="4" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@730d2164]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@730d2164]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:39 ICT" finished-at="2019-11-01T08:48:39 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_08 -->
    <test name="TC_09" duration-ms="35" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@45efd90f]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:40 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@45efd90f]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@45efd90f]" name="setUp" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@45efd90f]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@45efd90f]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@45efd90f]" name="saveEmployee" duration-ms="9" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn #]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000$]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:62]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@45efd90f]" name="tearDownObject" is-config="true" duration-ms="7" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@45efd90f]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@45efd90f]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_09 -->
    <test name="TC_10" duration-ms="33" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@76b07f29]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:40 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@76b07f29]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@76b07f29]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@76b07f29]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@76b07f29]" name="initializationObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@76b07f29]" name="saveEmployee" duration-ms="9" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[TpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytTpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000#]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00*]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[26:09]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@76b07f29]" name="tearDownObject" is-config="true" duration-ms="4" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@76b07f29]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@76b07f29]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_10 -->
    <test name="TC_11" duration-ms="18" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@b86de0d]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@b86de0d]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@b86de0d]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@b86de0d]" name="saveEmployee" duration-ms="6" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:10!]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@b86de0d]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@b86de0d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@b86de0d]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@b86de0d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@b86de0d]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_11 -->
    <test name="TC_12" duration-ms="29" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@1ec9bd38]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@1ec9bd38]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:40 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@1ec9bd38]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@1ec9bd38]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@1ec9bd38]" name="saveEmployee" duration-ms="10" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn #]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00*]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@1ec9bd38]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@1ec9bd38]" name="tearDownObject" is-config="true" duration-ms="6" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@1ec9bd38]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@1ec9bd38]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:40 ICT" finished-at="2019-11-01T08:48:40 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_12 -->
    <test name="TC_13" duration-ms="20" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@791d1f8b]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@791d1f8b]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:41 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@791d1f8b]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@791d1f8b]" name="saveEmployee" duration-ms="6" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[25:12]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@791d1f8b]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@791d1f8b]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@791d1f8b]" name="tearDownObject" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@791d1f8b]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@791d1f8b]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_13 -->
    <test name="TC_14" duration-ms="44" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@51a9ad5e]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:41 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@51a9ad5e]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@51a9ad5e]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@51a9ad5e]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@51a9ad5e]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@51a9ad5e]" name="saveEmployee" duration-ms="22" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn #]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[25:00]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:63]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@51a9ad5e]" name="tearDownObject" is-config="true" duration-ms="12" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@51a9ad5e]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@51a9ad5e]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_14 -->
    <test name="TC_15" duration-ms="27" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@3224a577]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@3224a577]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@3224a577]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@3224a577]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@3224a577]" name="saveEmployee" duration-ms="14" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt ]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:14%]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@3224a577]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@3224a577]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@3224a577]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@3224a577]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_15 -->
    <test name="TC_16" duration-ms="20" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@20d7d6fb]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@20d7d6fb]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:41 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@20d7d6fb]" name="setUp" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@20d7d6fb]" name="initializationObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@20d7d6fb]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@20d7d6fb]" name="saveEmployee" duration-ms="7" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn #]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000#]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[25:00]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:15a]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@20d7d6fb]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 43 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@20d7d6fb]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@20d7d6fb]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_16 -->
    <test name="TC_17" duration-ms="23" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@43599640]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@43599640]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:41 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@43599640]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@43599640]" name="initializationObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@43599640]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@43599640]" name="saveEmployee" duration-ms="9" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00*]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:66]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@43599640]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@43599640]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@43599640]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:41 ICT" finished-at="2019-11-01T08:48:41 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_17 -->
    <test name="TC_18" duration-ms="22" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@1acaf3d]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@1acaf3d]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@1acaf3d]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@1acaf3d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@1acaf3d]" name="saveEmployee" duration-ms="11" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ TpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytTpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000a]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value is-null="true"/>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@1acaf3d]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@1acaf3d]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@1acaf3d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@1acaf3d]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_18 -->
    <test name="TC_19" duration-ms="13" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@6e15fe2]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@6e15fe2]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@6e15fe2]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@6e15fe2]" name="saveEmployee" duration-ms="5" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[31:18]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@6e15fe2]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@6e15fe2]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@6e15fe2]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@6e15fe2]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@6e15fe2]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_19 -->
    <test name="TC_20" duration-ms="18" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@31920ade]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@31920ade]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@31920ade]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@31920ade]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@31920ade]" name="saveEmployee" duration-ms="7" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt ]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000@]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:76]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[31:19]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@31920ade]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@31920ade]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@31920ade]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@31920ade]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:42 ICT" finished-at="2019-11-01T08:48:42 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_20 -->
    <test name="TC_21" duration-ms="20" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@27d5a580]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:43 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@27d5a580]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@27d5a580]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@27d5a580]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@27d5a580]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@27d5a580]" name="saveEmployee" duration-ms="7" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[TpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytTpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt  ]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:67]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:76]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@27d5a580]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@27d5a580]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@27d5a580]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_21 -->
    <test name="TC_22" duration-ms="12" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@b978d10]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@b978d10]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@b978d10]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@b978d10]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@b978d10]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@b978d10]" name="saveEmployee" duration-ms="4" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00a]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:76]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@b978d10]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@b978d10]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@b978d10]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_22 -->
    <test name="TC_23" duration-ms="12" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@3370f42]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@3370f42]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@3370f42]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@3370f42]" name="saveEmployee" duration-ms="5" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[25:00]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:22]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@3370f42]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@3370f42]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@3370f42]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@3370f42]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@3370f42]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_23 -->
    <test name="TC_24" duration-ms="72" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:44 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@2141a12]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@2141a12]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="5" started-at="2019-11-01T08:48:43 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@2141a12]" name="setUp" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@2141a12]" name="saveEmployee" duration-ms="14" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn #]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000A]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:78]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@2141a12]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@2141a12]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:43 ICT" finished-at="2019-11-01T08:48:43 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@2141a12]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@2141a12]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@2141a12]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_24 -->
    <test name="TC_25" duration-ms="12" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@341814d3]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:44 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@341814d3]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@341814d3]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@341814d3]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@341814d3]" name="saveEmployee" duration-ms="4" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:24a]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@341814d3]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@341814d3]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@341814d3]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@341814d3]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_25 -->
    <test name="TC_26" duration-ms="16" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@73302995]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@73302995]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@73302995]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@73302995]" name="saveEmployee" duration-ms="5" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn #]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[25:00]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[31:25]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@73302995]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@73302995]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@73302995]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@73302995]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@73302995]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_26 -->
    <test name="TC_27" duration-ms="11" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@432038ec]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@432038ec]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@432038ec]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@432038ec]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@432038ec]" name="saveEmployee" duration-ms="4" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn #]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:67]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:26]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@432038ec]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@432038ec]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@432038ec]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@432038ec]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_27 -->
    <test name="TC_28" duration-ms="14" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@1b75c2e3]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@1b75c2e3]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:44 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@1b75c2e3]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@1b75c2e3]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@1b75c2e3]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@1b75c2e3]" name="saveEmployee" duration-ms="5" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn #]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00*]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:27%]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@1b75c2e3]" name="tearDownObject" is-config="true" duration-ms="3" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@1b75c2e3]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@1b75c2e3]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:44 ICT" finished-at="2019-11-01T08:48:44 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_28 -->
    <test name="TC_29" duration-ms="26" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@59a008ba]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:45 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@59a008ba]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@59a008ba]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@59a008ba]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@59a008ba]" name="saveEmployee" duration-ms="19" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00*]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:28a]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@59a008ba]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@59a008ba]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@59a008ba]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@59a008ba]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_29 -->
    <test name="TC_30" duration-ms="18" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@78d6692f]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@78d6692f]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@78d6692f]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@78d6692f]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@78d6692f]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@78d6692f]" name="saveEmployee" duration-ms="5" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000a]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00*]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:29$]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@78d6692f]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@78d6692f]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@78d6692f]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_30 -->
    <test name="TC_31" duration-ms="14" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@7a362b6b]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:45 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@7a362b6b]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@7a362b6b]" name="saveEmployee" duration-ms="7" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[25:00]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:43@]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@7a362b6b]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@7a362b6b]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@7a362b6b]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@7a362b6b]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@7a362b6b]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@7a362b6b]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_31 -->
    <test name="TC_32" duration-ms="9" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@61544ae6]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@61544ae6]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@61544ae6]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@61544ae6]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@61544ae6]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@61544ae6]" name="saveEmployee" duration-ms="3" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt ]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:67]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@61544ae6]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@61544ae6]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@61544ae6]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_32 -->
    <test name="TC_33" duration-ms="9" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@764faa6]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@764faa6]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@764faa6]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@764faa6]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@764faa6]" name="saveEmployee" duration-ms="3" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[TpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytTpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000@]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:32#]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@764faa6]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@764faa6]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@764faa6]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@764faa6]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:45 ICT" finished-at="2019-11-01T08:48:45 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_33 -->
    <test name="TC_34" duration-ms="12" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@7331196b]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@7331196b]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@7331196b]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@7331196b]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@7331196b]" name="saveEmployee" duration-ms="5" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000@]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[31:33]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@7331196b]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@7331196b]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@7331196b]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@7331196b]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_34 -->
    <test name="TC_35" duration-ms="11" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@8c3619e]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@8c3619e]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@8c3619e]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@8c3619e]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@8c3619e]" name="saveEmployee" duration-ms="3" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:67]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:34@]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@8c3619e]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@8c3619e]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@8c3619e]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@8c3619e]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_35 -->
    <test name="TC_36" duration-ms="11" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@b7c4869]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@b7c4869]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:46 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@b7c4869]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@b7c4869]" name="saveEmployee" duration-ms="5" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[  Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ TpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytTpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000#]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:35a]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@b7c4869]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@b7c4869]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@b7c4869]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@b7c4869]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@b7c4869]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_36 -->
    <test name="TC_37" duration-ms="9" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@19835e64]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@19835e64]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@19835e64]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@19835e64]" name="saveEmployee" duration-ms="3" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Tpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000@]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:36]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@19835e64]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@19835e64]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@19835e64]" name="tearDownObject" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@19835e64]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@19835e64]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_37 -->
    <test name="TC_38" duration-ms="8" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@24111ef1]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@24111ef1]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@24111ef1]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@24111ef1]" name="saveEmployee" duration-ms="2" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[TpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytTpoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuytrewqpoiuytrepoiuytrewqpoiuyt ]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:67]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[11:37]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@24111ef1]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@24111ef1]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="FAIL" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@24111ef1]" name="tearDownObject" is-config="true" duration-ms="2" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <exception class="org.springframework.dao.InvalidDataAccessApiUsageException">
            <message>
              <![CDATA[The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.springframework.dao.InvalidDataAccessApiUsageException: The given id must not be null!; nested exception is java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:384)
at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:491)
at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59)
at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:133)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213)
at com.sun.proxy.$Proxy102.delete(Unknown Source)
at com.example.service.StationServiceImpl.deleteStation(StationServiceImpl.java:73)
at com.junit.testInsertStation.tearDownObject(testInsertStation.java:77)
at sun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1175)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.lang.IllegalArgumentException: The given id must not be null!
at org.springframework.util.Assert.notNull(Assert.java:115)
at org.springframework.data.jpa.repository.support.SimpleJpaRepository.delete(SimpleJpaRepository.java:146)
at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:503)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:488)
at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:460)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282)
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)
... 42 more
]]>
            </full-stacktrace>
          </exception> <!-- org.springframework.dao.InvalidDataAccessApiUsageException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@24111ef1]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@24111ef1]" name="springTestContextAfterTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_38 -->
    <test name="TC_39" duration-ms="35" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
      <class name="com.junit.testInsertStation">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.junit.testInsertStation@dbd8e44]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.junit.testInsertStation@dbd8e44]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="saveEmployee(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.junit.testInsertStation@dbd8e44]" name="saveEmployee" duration-ms="15" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Ga Hà Nội]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 120 Lê Duẩn- Trần Hưng Đạo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[05:00]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[23:00]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- saveEmployee -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.junit.testInsertStation@dbd8e44]" name="setUp" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="initializationObject()[pri:0, instance:com.junit.testInsertStation@dbd8e44]" name="initializationObject" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializationObject -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@dbd8e44]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="tearDownObject()[pri:0, instance:com.junit.testInsertStation@dbd8e44]" name="tearDownObject" is-config="true" duration-ms="19" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownObject -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.junit.testInsertStation@dbd8e44]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.junit.testInsertStation@dbd8e44]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2019-11-01T08:48:46 ICT" finished-at="2019-11-01T08:48:46 ICT">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.junit.testInsertStation.saveEmployee(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.text.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
      </class> <!-- com.junit.testInsertStation -->
    </test> <!-- TC_39 -->
  </suite> <!-- creatStaTion -->
  <suite name="allSuites" duration-ms="0" started-at="2019-11-01T08:48:47 ICT" finished-at="2019-11-01T08:48:47 ICT">
    <groups>
    </groups>
  </suite> <!-- allSuites -->
</testng-results>
